plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'org.sonarqube'
}
 
android {
    namespace 'com.example.myandroidapp'
    compileSdk 34
 
    defaultConfig {
        applicationId "com.example.myandroidapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
 
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
 
    testOptions {
        unitTests.includeAndroidResources = true
    }
}
 
jacoco {
    toolVersion = "0.8.10"
}
 
// Automatically generate code coverage after tests
tasks.withType(Test).configureEach {
    useJUnit()
    finalizedBy(tasks.jacocoTestReport) // Ensure jacoco runs after tests
}
 
// JaCoCo test coverage report configuration
tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn tasks.testDebugUnitTest
 
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
 
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*'
    ]
 
    def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def javaClasses = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
 
    classDirectories.setFrom(files([debugTree, javaClasses]))
    sourceDirectories.setFrom(files("src/main/java"))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code-coverage/connected/*coverage.ec'
    ]))
}
 
dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
 
    testImplementation 'junit:junit:4.13.2'
}

sonarqube {
    properties {
        property("sonar.projectKey", "MyAndroidApp")
        property("sonar.projectName", "MyAndroidApp")
        property("sonar.projectVersion", "1.0")
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.login", System.getenv("SONAR_TOKEN") ?: "sqp_41e6cf7f57acd8a61981ef14e999bb3725c1ca22")
        property("sonar.sourceEncoding", "UTF-8")

        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
        property("sonar.java.binaries", "build/intermediates/javac/debug/classes")

        property("sonar.exclusions", "**/R.class,**/R\\\$*.class,**/BuildConfig.*,**/Manifest*.*")
        property("sonar.test.inclusions", "**/*Test.java")

        property("sonar.junit.reportPaths", "build/test-results/testDebugUnitTest")
        property("sonar.java.coveragePlugin", "jacoco")
        property("sonar.androidLint.reportPaths", "${project.buildDir}/reports/lint-results-debug.xml")
        property("sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml")
    }
}

